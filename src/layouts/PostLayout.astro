---
import type { z } from "astro:content";
import type { postSchema } from "../content/config";
import Header from "../components/Header.astro";
import BaseHead from "../components/BaseHead.astro";

export interface Props {
  content: z.TypeOf<typeof postSchema> & { readingTime: string };
}

const {
  content: { title, createdAt, author, excerpt, image, readingTime },
} = Astro.props;

const pubDate = new Date(createdAt).toLocaleDateString("en-US", {
  year: "numeric",
  month: "short",
  day: "numeric",
});

const authorIcon =
  (await Astro.glob("../../public/authors/**/*.{jpeg,jpg,png}"))
    .map((v) => v.default.replace("/public", ""))
    .filter((v) => v.toLowerCase().includes(author.toLowerCase()))
    .at(0) ?? "/authors/default.png";

const input = JSON.stringify({
  title,
  subtitle: `${pubDate} â€¢ ${readingTime}`,
});
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead
      title={title}
      description={excerpt}
      image={image ?? `https://og.duro.ml/api/igp?input=${input}`}
    />
  </head>

  <body>
    <Header />
    <article>
      <h1 class="mb-0">{title}</h1>

      <div class="flex items-center mb-0">
        <img
          src={authorIcon}
          width="40"
          height="40"
          class="border-none text-transparent rounded-full"
        />
        <div class="flex items-start flex-col mb-0 ml-2 content-center text-sm">
          <strong>
            <a
              href={`/authors/${author.toLowerCase()}`}
              class="no-underline font-bold text-blue-700 dark:text-blue-400"
            >
              {author}
            </a>
          </strong>
          <time
            class="text-neutral-800 dark:text-neutral-300"
            datetime={pubDate}>{pubDate}</time
          >
        </div>
      </div>
      <slot />
    </article>
    <button
      class="newpost"
      title="New Post"
      onclick="window.open('https://github.com/oyepriyansh/DevTweet/blob/master/CONTRIBUTING.md', '_blank')"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        height="1em"
        viewBox="0 0 448 512"
      >
        <path
          d="M256 80c0-17.7-14.3-32-32-32s-32 14.3-32 32V224H48c-17.7 0-32 14.3-32 32s14.3 32 32 32H192V432c0 17.7 14.3 32 32 32s32-14.3 32-32V288H400c17.7 0 32-14.3 32-32s-14.3-32-32-32H256V80z"
          fill="#FFFFFF"></path>
      </svg>
    </button>
    <!-- button scroll to top -->
    <button class="scroll-top" title="Scroll to top" id="btn-scroll-top">
      <svg
        width="24"
        height="24"
        xmlns="http://www.w3.org/2000/svg"
        fill="white"
        fill-rule="evenodd"
        clip-rule="evenodd"
        ><path
          d="M11 2.206l-6.235 7.528-.765-.645 7.521-9 7.479 9-.764.646-6.236-7.53v21.884h-1v-21.883z"
        ></path></svg
      >
    </button>

    <script is:inline>
      const theme = (() => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      })();

      if (theme === "light") {
        document.documentElement.classList.remove("dark");
      } else {
        document.documentElement.classList.add("dark");
      }
      window.localStorage.setItem("theme", theme);

      // scroll to top
      const scrollToTopBtn = document.querySelector(".scroll-top");
      const rootElement = document.documentElement;

      function handleScroll() {
        // Do something on scroll
        const scrollTotal = rootElement.scrollHeight - rootElement.clientHeight;
        console.log(scrollTotal);
        if (rootElement.scrollTop / scrollTotal > 0.1) {
          // Show button
          scrollToTopBtn.classList.add("showBtn");
        } else {
          // Hide button
          scrollToTopBtn.classList.remove("showBtn");
        }
      }

      function scrollToTop() {
        // Scroll to top logic
        rootElement.scrollTo({
          top: 0,
          behavior: "smooth",
        });
      }

      scrollToTopBtn.addEventListener("click", scrollToTop);
      document.addEventListener("scroll", handleScroll);
    </script>
  </body>
</html>
